
#include "Arduino.h"
#include <math.h>
#include <Wire.h>

// step 1 = macros
#define SAMPLE_FREQ 4000
#define SIZE_BUFF 1000
#define SAMPLE_PERIOD (1000/4000)   //(1000/SAMPLE_FREQ)
// step 4 = define microphone pin and threshould
#define MICROPHONE_PIN  "????"                //define the pin number
#define threshold  4.2140e-10         //define the power of silence 
#define Pin_temp 28                   //pin number for temp sensor
#define RED_LED 30                      
#define GREEN_LED 39
#define BLUE_LED 40
#ifndef __MICS_VZ_89TE_H__
#define __MICS_VZ_89TE_H__
#define MICS_VZ_89TE_ADDR                0x70 //0x70 default I2C address
//registers
#define MICS_VZ_89TE_ADDR_CMD_GETSTATUS  0x0C  // This command is used to read the VZ89 status coded with 6 bytes:
#define MICS_VZ_89TE_DATE_CODE           0x0D
#define SDA 8
#define SCL 9

int Buffer_Sample[SIZE_BUFF];

//step 2 = collecting data during a SAMPLE_PERIOD
void Read_Samples(void)
{
  short num_sample, val_sample;   
  unsigned long curtime, nextime;

  nextime = micros() + SAMPLE_PERIOD;
  num_sample = 0;
  while (num_sample < SIZE_BUFF) {
    do {
      curtime = micros();
    } while (curtime < nextime);
    
    val_sample = analogRead(MICROPHONE_PIN);    //define microphone Pin to read sound
    Buffer_Sample[num_sample] = val_sample;   //array for sound
    num_sample++;
    
    nextime += SAMPLE_PERIOD;
  }
  return ;
}

//step 3 = calculate the power of sound
int Get_Sound_Power()
{
  float power = 0;
  float Buffer_Sample_Center[SIZE_BUFF];
  
  for(int i = 0; i < SIZE_BUFF; i++){
    power += Buffer_sample[i] * Buffer_sample[i];
  }
  
  float power_mean = power / SIZE_BUFF;

  
  // center the signal
  for(i = 0; i < SIZE_BUFF; i++){
    float Buffer_Sample_Center[i] = Buffer_Sample [i] - power_mean; 
  }
  return power_mean;
}

class MICS_VZ_89TE {
      public:
          MICS_VZ_89TE(void);
          // To get the data
          float getCO2(void);
          float getVOC(void);
          float getYear(void);
          float getMonth(void);
          float getDay(void);
          float getRev(void);
          float getCrc(void);
          float getStatus(void);

          float co2;
          float voc;
          float status;

          float year;
          float month;
          float day;
          float rev;
          float crc;

          void begin(uint8_t sdaPin, uint8_t sclPin);
          void readSensor(void);
          void getVersion(void);

      private:
          uint8_t _i2caddr;
          void readData(byte reg, uint8_t data[]);
      };

      #endif


      MICS_VZ_89TE::MICS_VZ_89TE(void) {
          _i2caddr = MICS_VZ_89TE_ADDR;
          co2 = 0.0;
          voc = 0.0;
      }

float MICS_VZ_89TE::getCO2(void) {
          return co2;
      }

float MICS_VZ_89TE::getVOC(void) {
          return voc;
      }

float MICS_VZ_89TE::getYear(void) {
          return year;
      }

float MICS_VZ_89TE::getMonth(void) {
          return month;
      }

float MICS_VZ_89TE::getDay(void) {
          return day;
      }

float MICS_VZ_89TE::getRev(void) {
          return rev;
      }

float MICS_VZ_89TE::getCrc(void) {
          return crc;
      }

float MICS_VZ_89TE::getStatus(void) {
          return status;
}

void MICS_VZ_89TE::readSensor(void) {
          static uint8_t data[7];
          readData(MICS_VZ_89TE_ADDR_CMD_GETSTATUS, data);

          status = data[5];

          co2 = (data[1] - 13) * (1600.0 / 229) + 400; // ppm: 400 .. 2000
          voc = (data[0] - 13) * (1000.0 / 229);       // ppb: 0 .. 1000
}

void MICS_VZ_89TE::getVersion(void) {
          static uint8_t data[7];
          readData(MICS_VZ_89TE_DATE_CODE, data);

          year = data[0];
          month = data[1];
          day = data[2];
          rev = data[3];
          crc = data[6];
}

void MICS_VZ_89TE::begin(uint8_t sdaPin, uint8_t sclPin) {
          Wire.begin(sdaPin, sclPin);
}

void MICS_VZ_89TE::readData(byte reg, uint8_t data[]) {
          uint8_t i = 0;
          Wire.beginTransmission((uint8_t)_i2caddr);
          Wire.write((uint8_t)reg); // This sends the command to get data
          Wire.write(0x0);
          Wire.write(0x0);
          Wire.write(0x0);
          Wire.write(0x0);
          Wire.write(0x0);
          Wire.endTransmission();

          Wire.beginTransmission(0xE1);
          Wire.endTransmission();

          Wire.requestFrom((uint8_t)_i2caddr, (byte)7);
          for (i = 0; i < 7; i++) {
              data[i] = Wire.read();
          }
}



void setup()
{
  // Serial port baud rate = 9600 bauds
  Serial.begin(9600);
  Serial1.begin(9600);              // initial bluetooth
  // Initialize the sensor input as an analog input
  pinMode(MICROPHONE_PIN, INPUT);   // define pin number of microphone to read
  pinMode(Pin_temp, INPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);

  CO2SENSOR.begin(SDA, SCL); // Replace SDA and SCL with the actual pin numbers you are using
}

//main function
void loop()
{
	int SoundPower;
  SoundPower = Get_Soud_Power();

  //trigger, sound
  if (SoundPower > threshold){
    	Serial.println(" ");
    	Serial.println("--- Power Sound ---");
      Serial.print(" Power = ");    Serial.println(SoundPower);

      Serial1.println(" ");
      Serial1.println("--- Power Sound ---");
      Serial1.print(" Power = ");    Serial1.println(SoundPower);

      Serial.println(" ");
      Serial.println("--- Temperature ---");
      Serial.print(temp_F);Serial.print("°F  ");   Serial.print(temp_C);Serial.println("°C  ");

      Serial1.println(" ");
      Serial1.println("--- Temperature ---");
      Serial1.print(temp_F);Serial.print("°F  ");   Serial1.print(temp_C);Serial1.println("°C  ");

      Serial1.println(" ");
      Serial1.println("--- CO2 ---");
      Serial1.println(co2);

      // Display on the OLED
      DisplayString(0,5,SoundPower);            // writing on the 5th line
      DisplayString(0,6,temp_C);
      DisplayString(3,6,"°C");
      DisplayString(0,7,co2);  // writing on the last line

      //temp
      value_temp  = analogRead(Pin_temp);
      float value_temp = 0.0;
      float tamp_F = ((value_temp*3.3)/4096.0)*100;
      float tamp_C = (((value_temp*3.3)/4096.0)*100-32)/1.8;
          
      if (tamp_F > 100) {
          digitalWrite(RED_LED, HIGH);
          digitalWrite(GREEN_LED, LOW);
          digitalWrite(BLUE_LED, LOW);
      } 
      if ( 20<= tamp_F <= 100) {
          digitalWrite(RED_LED, LOW);
          digitalWrite(GREEN_LED, HIGH);
          digitalWrite(BLUE_LED, LOW);
      } 
      if( tamp_F < 20){
          digitalWrite(RED_LED, LOW);
          digitalWrite(GREEN_LED, LOW);
          digitalWrite(BLUE_LED, HIGH);
      }
          
    //CO2
      CO2SENSOR.readSensor();
      float co2 = CO2SENSOR.getCO2();
      
  	//wait 2 second
      delay(2000);
  }
}

