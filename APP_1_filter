clc;
clear all;

%set Fs
Fs=1000;

%get samples from the documents
samples = [1,2*Fs];
[y1] = audioread("330.wav",samples);
[y2] = audioread("392.wav",samples);

%tansform into Frequency domain
x1=asind(y1);
x2=asind(y2);
Key=sin(x1)+sin(x2);
spectrum=abs(fft(Key));

%plot the spectrum
grid on;
plot(spectrum);
title("Fourier Transform");
-----------------------------------
-----------------------------------
a. audio read
	[y,fs] = audioread(‘.wav’);
	n = y;
	t = n/fs;
	plot(t, y);
	xlabel(‘time’);
	ylabel(‘amplitude’);
	title(‘fs = ’fs);

	%FFT
	d=fft(y,fs);
	subplot(2,2,1);
plot(abs(d));
	xlabel(‘frequency’);
	ylabel(‘amplitude’);
	
	subplot(2,2,2);
	plot(angle(d));
	xlabel(‘frequency’);
	ylabel(‘Phase Spectrum’);

	b. power of sound 
		p = sum(y^2);
		p_mean = p / n;
		p_check = rms(y)^2;

	c. filter parameter  
		% band-pass filter
		center_frequency = 1000; %Hz
		bandwidth = 500; %Hz

		%normalization
		center_frequency_nomalized = center_fenquency / (fs/2);
		bandwidth_nomalized = bandwidth / (fs/2);
	% The Nyquist frequency is named after Harry Nyquist, a Swedish-American engineer and physicist who made significant contributions to the understanding of communication systems. The concept is a key component of the Nyquist-Shannon sampling theorem.

Mathematically, the Nyquist frequency is defined as:
 
Where fs is the sampling rate. This equation states that the Nyquist frequency is half of the sampling rate. The Nyquist frequency is crucial because of the Nyquist-Shannon sampling theorem, which states that to accurately represent a signal, the sampling rate must be at least twice the highest frequency present in the signal. If the signal contains frequencies beyond the Nyquist frequency, aliasing can occur, leading to distortion and errors in the reconstructed signal.  In practical terms, when designing or analyzing digital signal processing systems, it's important to consider the Nyquist frequency to ensure that the sampling rate is appropriately chosen to avoid aliasing and accurately represent the desired signal bandwidth.

	
d. design filter
	filter_order = 50; %the maximum power of polynomial
	i=fir1(filter_order, [center_freq_ normalized – bandwidth_ normalized/2, center_freq_ normalized + bandwidth_ normalized/2], 'bandpass');
	% fir1(N, Wn, type); N = order, Wn =  passband freq or bandstop freq

	freqz(i, 1024,fs); %2^n, plotting the frequency response

e. filter 
	filtered_sound=filter(i , 1, y);
	freqz(i , 1, 1024, fs);
----------------------------------------------
----------------------------------------------
c. Filter the sound ( 2nd order filter) : The frequencies you process will be less than 2500 kHz.
Tips : 
		Definition of 2nd order filter refers to type of filter whose frequency response is determined by a second-order polynomial equation. In signal processing and control system analysis, filter are commonly categorized by their order which indicates the highest power of the variable.
				 

		i. What are the possible filter schemes
			The 2nd order filter can be classified into different types based on the coefficients and the behavior of the filter.
1.	Butterworth Filter: Provides a maximally flat frequency response in the passband.
2.	Chebyshev Type I: Provides a steeper roll-off in the stopband but with ripples in the passband.
3.	Chebyshev Type II: Similar to type I but with ripples in the stopband instead of the passband. 

ii. Use the parameters of the filter (s) that will be useful to you to determine the value of your schema components (analytically). 

iii. Simulate filter using the TINA or Tspice 

iv. Implement an analog filter and test it independently. 
4. Connect the sound sensors to your board 
a. Read the sensor with a sampling frequency of 10KHz and put the result in an array of 1000 cells. 
b. Compute the power of your samples and check if it’s work by testing with different noise condition. Calibrate it with the decibel measure sensor.
